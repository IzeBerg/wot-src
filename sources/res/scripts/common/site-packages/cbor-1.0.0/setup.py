from distutils.command.build_ext import build_ext
from distutils.errors import CCompilerError, DistutilsExecError, DistutilsPlatformError
import sys
from setuptools import setup, Extension
build_errors = (
 CCompilerError, DistutilsExecError, DistutilsPlatformError)
if sys.platform == 'win32' and sys.version_info > (2, 6):
    build_errors += (IOError,)

class BuildError(Exception):
    pass


class optional_build_ext(build_ext):

    def run(self):
        try:
            build_ext.run(self)
        except DistutilsPlatformError:
            raise BuildError()

    def build_extension(self, ext):
        try:
            build_ext.build_extension(self, ext)
        except build_errors as be:
            raise BuildError(be)
        except ValueError as ve:
            if "'path'" in str(sys.exc_info()[1]):
                raise BuildError(ve)
            raise


VERSION = eval(open('cbor/VERSION.py', 'rb').read())
setup_options = dict(name='cbor', version=VERSION, description='RFC 7049 - Concise Binary Object Representation', long_description="\nAn implementation of RFC 7049 - Concise Binary Object Representation (CBOR).\n\nCBOR is comparable to JSON, has a superset of JSON's ability, but serializes to a binary format which is smaller and faster to generate and parse.\n\nThe two primary functions are cbor.loads() and cbor.dumps().\n\nThis library includes a C implementation which runs 3-5 times faster than the Python standard library's C-accelerated implementanion of JSON. This is also includes a 100% Python implementation.\n", author='Brian Olson', author_email='bolson@bolson.org', url='https://bitbucket.org/bodhisnarkva/cbor', packages=[
 'cbor'], package_dir={'cbor': 'cbor'}, ext_modules=[
 Extension('cbor._cbor', include_dirs=[
  'c/'], sources=[
  'c/cbormodule.c'], headers=[
  'c/cbor.h'])], license='Apache', classifiers=[
 'Development Status :: 5 - Production/Stable',
 'Intended Audience :: Developers',
 'License :: OSI Approved :: Apache Software License',
 'Operating System :: OS Independent',
 'Programming Language :: Python :: 2.7',
 'Programming Language :: Python :: 3.4',
 'Programming Language :: Python :: 3.5',
 'Programming Language :: C',
 'Topic :: Software Development :: Libraries :: Python Modules'], cmdclass={'build_ext': optional_build_ext})

def main():
    is_jython = 'java' in sys.platform
    is_pypy = hasattr(sys, 'pypy_translation_info')
    if is_jython or is_pypy:
        del setup_options['ext_modules']
    try:
        setup(**setup_options)
    except BuildError as be:
        sys.stderr.write('\nBUILD ERROR:\n  %s\nRETRYING WITHOUT C EXTENSIONS\n' % (be,))
        del setup_options['ext_modules']
        setup(**setup_options)


if __name__ == '__main__':
    main()