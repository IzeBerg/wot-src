try:
    from ._cbor import loads, dumps, load, dump
except:
    from .cbor import loads, dumps, load, dump

from .cbor import Tag, CBOR_TAG_CBOR, _IS_PY3

class ClassTag(object):

    def __init__(self, tag_number, class_type, encode_function, decode_function):
        self.tag_number = tag_number
        self.class_type = class_type
        self.encode_function = encode_function
        self.decode_function = decode_function


class TagMapper(object):

    def __init__(self, class_tags=None, raise_on_unknown_tag=False):
        self.class_tags = class_tags
        self.raise_on_unknown_tag = raise_on_unknown_tag

    def encode(self, obj):
        for ct in self.class_tags:
            if ct.class_type is None or ct.encode_function is None:
                continue
            if isinstance(obj, ct.class_type):
                return Tag(ct.tag_number, ct.encode_function(obj))

        if isinstance(obj, (list, tuple)):
            return [ self.encode(x) for x in obj ]
        else:
            if isinstance(obj, dict):
                out = {}
                if _IS_PY3:
                    items = obj.items()
                else:
                    items = obj.iteritems()
                for k, v in items:
                    out[k] = self.encode(v)

                return out
            return obj

    def decode(self, obj):
        if isinstance(obj, Tag):
            for ct in self.class_tags:
                if ct.tag_number == obj.tag:
                    return ct.decode_function(obj.value)

            if self.raise_on_unknown_tag:
                raise UnknownTagException(str(obj.tag))
            return obj
        if isinstance(obj, list):
            for i, v in enumerate(obj):
                obj[i] = self.decode(v)

            return obj
        if isinstance(obj, dict):
            if _IS_PY3:
                items = obj.items()
            else:
                items = obj.iteritems()
            for k, v in items:
                obj[k] = self.decode(v)

            return obj
        return obj

    def dump(self, obj, fp):
        dump(self.encode(obj), fp)

    def dumps(self, obj):
        return dumps(self.encode(obj))

    def load(self, fp):
        return self.decode(load(fp))

    def loads(self, blob):
        return self.decode(loads(blob))


class WrappedCBOR(ClassTag):

    def __init__(self):
        super(WrappedCBOR, self).__init__(CBOR_TAG_CBOR, None, None, loads)
        return

    @staticmethod
    def wrap(ob):
        return Tag(CBOR_TAG_CBOR, dumps(ob))

    @staticmethod
    def dump(ob, fp):
        return dump(Tag(CBOR_TAG_CBOR, dumps(ob)), fp)

    @staticmethod
    def dumps(ob):
        return dumps(Tag(CBOR_TAG_CBOR, dumps(ob)))


class UnknownTagException(BaseException):
    pass