from __future__ import unicode_literals
import re
from lib2to3.pgen2 import token
from lib2to3 import fixer_base
_literal_re = re.compile(b'[^bBuUrR]?[\\\'\\"]')

class FixBytes(fixer_base.BaseFix):
    BM_compatible = True
    PATTERN = b'STRING'

    def transform(self, node, results):
        if node.type == token.STRING:
            if _literal_re.match(node.value):
                new = node.clone()
                new.value = b'b' + new.value
                return new