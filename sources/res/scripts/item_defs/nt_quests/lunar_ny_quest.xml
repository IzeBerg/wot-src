<?xml version="1.0" encoding="utf-8"?>
<root>
	<quests>
		<NTQuest>
			<id>lunarNewYearBattle</id>
			<enabled>true</enabled>
			<serverOnly>true</serverOnly>
			<conditions>
				<preBattle/>
				<postBattle/>
			</conditions>
			<scripts>
QUEST_EVENT_TYPE = globals().get(&apos;QUEST_EVENT_TYPE&apos;)
ARENA_BONUS_TYPE = globals().get(&apos;ARENA_BONUS_TYPE&apos;)
LOG = globals().get(&apos;LOG&apos;)

def onInit(eventType, eventData, quest, processor):
    LOG(&apos;QUEST EVENT:onInit&apos;, eventType, quest.id)
    for event in events.iterkeys():
        processor.subscribe(event, quest)
    return True

def onFinishBattle(eventType, eventData, quest, processor):
    from soft_exception import SoftException
    from debug_utils import LOG_CURRENT_EXCEPTION
    LOG(&apos;QUEST EVENT:onFinishBattle&apos;, eventType, quest.id)

    try:
        account = eventData.get(&apos;account&apos;)
        if account is None:
            return

        bonusType = eventData.get(&apos;avatarResults&apos;, {}).get(&apos;bonusType&apos;, None)
        if bonusType not in ARENA_BONUS_TYPE.RANDOM_RANGE:
            LOG(&apos;QUEST EVENT:onFinishBattle, quest.id = {}: unsuitable bonusType = {}&apos;.format(quest.id, bonusType))
            return

        gameParamsRev = eventData.get(&apos;gameParamsRev&apos;, None)

        ny = account._lunarNewYear
        lunarLock = eventData.get(&apos;arenaLockInfo&apos;, {}).get(&apos;lunarNewYear&apos;, None)
        if not lunarLock:
            LOG(&apos;QUEST EVENT:onFinishBattle, quest.id = {}: lunarNewYear lock info is None&apos;.format(quest.id))
            return
        bonusData = ny.computeQuestBonusFor(lunarLock, gameParamsRev)

        eventData[&apos;results&apos;][quest.id] = {
            &apos;bonusCnt&apos;: 1,
            &apos;progress&apos;: {&apos;bonusCount&apos;: -1}
        }

        eventData[&apos;results&apos;][quest.id].update({
            &apos;bonus&apos;: bonusData,
        })
        LOG(&apos;QUEST EVENT:onFinishBattle, quest.id = {}: bonusData = {}&apos;.format(quest.id, bonusData))
    except SoftException as err:
        LOG_CURRENT_EXCEPTION()
        return

events = {
    QUEST_EVENT_TYPE.INIT: onInit,
    QUEST_EVENT_TYPE.FINISH_BATTLE_NT_QUEST: onFinishBattle,
}

def quest(eventType, eventData, quest, processor):
    LOG(&apos;QUEST EVENT:quest&apos;, eventType, quest.id)
    return events.get(eventType, lambda *args: False)(eventType, eventData, quest, processor)
         </scripts>
			<bonus/>
		</NTQuest>
	</quests>
</root>
